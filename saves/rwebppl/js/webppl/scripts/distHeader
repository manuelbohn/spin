#!/usr/bin/env node

'use strict';

var fs = require('fs');
var path = require('path');
var _ = require('lodash');
var dists = require('../src/dists');

var helpers = {
  downcaseInitial: function(name) {
    return name[0].toLowerCase() + name.slice(1);
  },

  // Given the parameter metadata for a distribution, generate the
  // formal parameters for the corresponding sampling helper.
  fnParams: function(params) {
    return params
      .map(function(_, i) { return 'arg' + i; })
      .join(', ');
  },

  // Given the parameter metadata for a distribution, generate the
  // keys/values for the object of named parameters expected by the
  // distribution constructor. This in done such that the helper
  // function will take its arguments in the same order as the
  // parameters in the metadata.
  args2Obj: function(params) {
    return params
      .map(function(param, i) { return param.name + ': arg' + i; })
      .join(', ');
  }
};

var t = _.mapValues({
  ctor: 'var <%= name %> = dists.make<%= name %>;',
  helper: [
    'var <% print(downcaseInitial(name)) %> = function(<% print(fnParams(params)) %>) {',
    '  var params = util.isObject(arg0) ? arg0 : {<% print(args2Obj(params)) %>};',
    '  return sample(<%= name %>(params));',
    '};'
  ].join('\n')
}, _.template);

function main() {
  var scriptName = path.join(path.basename(__dirname), path.basename(__filename));
  var out = [
    "// This file was automatically generated by '" + scriptName + "'.",
    "'no caching';"
  ];
  dists.metadata().forEach(function(meta) {
    out.push(t.ctor(meta));
    if (!meta.nohelper) {
      out.push(t.helper(_.defaults({}, helpers, meta)));
    }
  });
  var filename = path.join(__dirname, '..', 'src', 'dists.wppl');
  fs.writeFileSync(filename, out.join('\n'));
}

main();
