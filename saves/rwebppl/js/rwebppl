#!/usr/bin/env node

var webppl = require('./webppl')
var webppl_main = require('./webppl/src/main');
var util = require('./webppl/src/util');
var pkg = require('./webppl/src/pkg');
var argv = require('./webppl/node_modules/minimist')(process.argv.slice(2));
var path = require('path');
var fs = require('fs');
var errors = require('./webppl/src/errors/errors');
var parseV8 = require('./webppl/src/errors/parsers').parseV8;
var showError = require('./webppl/src/errors/node').showError;

function writeWebPPLValue(x, file) {
  if (dists.isDist(x) && x.isContinuous) {
    var serialized_x = util.serialize(x.toString());
  } else if (dists.isDist(x) && x.samples) {
    var serialized_x = util.serialize(x.samples);
  } else {
    var serialized_x = util.serialize(x);
  }
  // write to a temporary file and then rename it to output file name, so that
  // creating the output file is atomic
  fs.writeFileSync(file + "_tmp", serialized_x + "\n");
  fs.renameSync(file + "_tmp", file);
};


function main() {
  var code = fs.readFileSync(argv.programFile, 'utf8');

  var packagePaths = [
    path.join(path.dirname(argv.programFile), 'node_modules'),
    pkg.globalPkgDir()
  ];

  var packages = util.asArray(argv.require).map(function(name_or_path) {
    return pkg.load(pkg.read(name_or_path, packagePaths, argv.verbose));
  });

  packages.forEach(function(pkg) {
    if (pkg.js) { global[pkg.js.identifier] = require(pkg.js.path); }
    pkg.headers.forEach(webppl.requireHeader);
  });

  // Random seed
  var seed = argv['random-seed'];
  if (seed !== undefined) {
    util.assertValidRandomSeed(seed);
    util.seedRNG(seed);
  }

  webppl.run(code, function(s,x) {
    writeWebPPLValue(x, argv.outputFile);
  }, {
    bundles: webppl_main.parsePackageCode(packages, false),
    errorHandlers: [
      function(error) {
        if (error instanceof Error && error.wpplRuntimeError) {
          try {
            var stack = errors.recoverStack(error, parseV8);
            showError(error, stack, argv.programFile, true);
            process.exitCode = 1;
          } catch (e) {
            // If we fail to generate a readable error message re-throw
            // the original error.
            throw error;
          }
        } else {
          throw error;
        }
      }
    ]
  });

}

try {
  main();
} finally {
  fs.writeFileSync(argv.finishFile,  "");
}
